@using CentroEventos.Aplicacion.CasosDeUso.UsuarioCasosDeUso
@using CentroEventos.Aplicacion.CasosDeUso.PersonaCasosDeUso
@using CentroEventos.Aplicacion.Servicios
@using CentroEventos.Aplicacion.Entidades
@page "/register"
@rendermode InteractiveServer
@inject NavigationManager nav

@inject AltaUsuarioUseCase altaUsuarioUseCase
@inject AltaPersonaUseCase altaPersonaUseCase
@inject Sesion sesion

<PageTitle>Sign in - Centro de Eventos</PageTitle>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger fs-5">@mensajeError</div>
}

<h3>Registrarse</h3>
<form @onsubmit="Registrarse">
    <label for="nombre">Nombre</label>
    <input type="text" id="nombre" name="nombre" placeholder="nombre" @bind="_nombre" >
    <label for="apellido">Apellido</label>
    <input type="text" id="apellido" name="apellido" placeholder="apellido" @bind="_apellido" >
    <label for="email">Email</label>
    <input type="text" id="email" name="email" placeholder="email" @bind="_email" >
    <label for="password">Contraseña</label>
    <input type="password" id="password" name="password" placeholder="contraseña" @bind="_password">
    <button class="btn btn-primary" type="submit">Aceptar</button>
</form>

@code {
    private string _nombre = "";
    private string _apellido = "";
    private string _email = "";
    private string _password = "";
    
    private void Registrarse()
    {
        try {
            Usuario u = new Usuario(_nombre,_apellido,_email,_password);
            altaUsuarioUseCase.Ejecutar(u);
            nav.NavigateTo("/login");
        } 
        catch (Exception err)
        {
            mensajeError = err.Message;
            _ = LimpiarMensajeErrorAsync();
        }
    }

    private string? mensajeError;

    private async Task LimpiarMensajeErrorAsync()
    {
        await Task.Delay(3000); // 3 segundos
        mensajeError = null;
        StateHasChanged();
    }
}
