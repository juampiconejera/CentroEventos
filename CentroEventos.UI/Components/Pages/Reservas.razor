@using CentroEventos.Aplicacion.Entidades
@using CentroEventos.Aplicacion.Enumerativos
@using CentroEventos.Aplicacion.Servicios
@using CentroEventos.Aplicacion.CasosDeUso.ReservaCasosDeUso
@page "/reservas"
@rendermode InteractiveServer
@inject NavigationManager nav
@inject Sesion sesion
@inject ListarReservaUseCase listarReserva
@inject ModificarReservaUseCase modificarReserva
@inject BajaReservaUseCase bajaReserva
@inject AltaReservaUseCase altaReserva

<PageTitle>Gestion de Reservas - Centro de Eventos</PageTitle>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger fs-5">@mensajeError</div>
}

@if (!sesion.isLogin())
{
    <div class="text-center mt-4">
        <p>Bienvenido/a. Iniciá sesión o registrate para continuar.</p>
        <button class="btn btn-primary me-2" @onclick='() => nav.NavigateTo("/login")'>Iniciar Sesión</button>
        <button class="btn btn-secondary" @onclick='() => nav.NavigateTo("/register")'>Registrarse</button>
    </div>
}
else
{
    <div class="row row-cols-1 row-cols-md-4 g-4 mt-4">
        <table class="table table-bordered table-striped mt-4">
            <thead class="table-dark">
                <tr>
                    <th>Id</th>
                    <th>Id del responsable</th>
                    <th>Id del evento</th>
                    <th>Fecha de alta</th>
                    <th>Estado de la asistencia</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var reserva in _reservas)
                {
                    <tr>
                        <td>@reserva.Id</td>
                        <td>@reserva.PersonaId</td>
                        <td>@reserva.EventoDeportivoId</td>
                        <td>@reserva.FechaAltaReserva</td>
                        <td>@reserva.EstadoAsistencia</td>
                        <td style="width: 140px;">
                            @if (sesion.UsuarioActual.Permisos.Contains(Permiso.ReservaBaja))
                            {
                                <button class="btn btn-sm btn-warning me-1" @onclick="() => AbrirEditar(reserva)">Editar</button>
                            }
                            @if (sesion.UsuarioActual.Permisos.Contains(Permiso.ReservaBaja))
                            {
                                <button class="btn btn-sm btn-danger" @onclick="() => AbrirEliminar(reserva)">Eliminar</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @if (sesion.UsuarioActual.Permisos.Contains(Permiso.ReservaAlta))
        {
            <button class="btn btn-success mt-3" @onclick="() => AbrirAgregar()">Agregar reserva</button>
        }
    </div>
}

@if (reservaSeleccionada is not null && modo == "editar")
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editar reserva</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <form Model="reservaSeleccionada" @onsubmit="GuardarCambios">
                        <div class="mb-3">
                            <label class="form-label">Id de la persona</label>
                            <input type="text" class="form-control" @bind="reservaSeleccionada.PersonaId" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Id del evento deportivo</label>
                            <input type="text" class="form-control" @bind="reservaSeleccionada.EventoDeportivoId" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Fecha de alta</label>
                            <input type="text" class="form-control" @bind="reservaSeleccionada.FechaAltaReserva" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Estado de asistencia</label>
                            <input type="text" class="form-control" @bind="reservaSeleccionada.EstadoAsistencia" />
                        </div>
                        <div class="text-end">
                            <button class="btn btn-secondary me-2" type="button" @onclick="CerrarModal">Cancelar</button>
                            <button class="btn btn-primary" type="submit">Guardar cambios</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

@if (reservaSeleccionada is not null && modo == "agregar")
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Agregar reserva</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <form Model="reservaSeleccionada"  @onsubmit="agregarReserva">
                        <div class="mb-3">
                            <label class="form-label">Id de la persona</label>
                            <input type="text" class="form-control" @bind="reservaSeleccionada.PersonaId" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Id del evento deportivo</label>
                            <input type="text" class="form-control" @bind="reservaSeleccionada.EventoDeportivoId" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Fecha de alta</label>
                            <input type="text" class="form-control" @bind="reservaSeleccionada.FechaAltaReserva" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Estado de asistencia</label>
                            <input type="text" class="form-control" @bind="reservaSeleccionada.EstadoAsistencia" />
                        </div>
                        <div class="text-end">
                            <button class="btn btn-secondary me-2" type="button" @onclick="CerrarModal">Cancelar</button>
                            <button class="btn btn-primary" type="submit">Guardar cambios</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

@if (reservaSeleccionada is not null && modo == "eliminar")
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de que querés eliminar la reserva<strong>@reservaSeleccionada.Id</strong>?</p>
                </div>
                <div class="modal-footer">
                <button class="btn btn-danger" @onclick="EliminarReserva">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Reserva> _reservas = new List<Reserva>();
    private Reserva? reservaSeleccionada = new Reserva();
    private string? modo;
    protected override void OnInitialized()
    {
        try
        {
            _reservas = listarReserva.Ejecutar();
        }
        catch (Exception err)
        {
            mensajeError = err.Message;
            _ = LimpiarMensajeErrorAsync();
        }
    }
    void AbrirEditar(Reserva r)
    {
        reservaSeleccionada = new Reserva
        {
            Id = r.Id,
            PersonaId = r.PersonaId,
            EventoDeportivoId = r.EventoDeportivoId,
        };
        modo = "editar";
    }
    void AbrirEliminar(Reserva r)
    {
        reservaSeleccionada = r;
        modo = "eliminar";
    }
    void AbrirAgregar()
    {
        reservaSeleccionada = new Reserva();
        modo = "agregar";
    }
    void CerrarModal()
    {
        reservaSeleccionada = null;
        modo = null;
    }

    void GuardarCambios()
    {
        try
        {
            modificarReserva.Ejecutar(reservaSeleccionada!, sesion.UsuarioActual!);
        }
        catch (Exception err)
        {
            mensajeError = err.Message;
            _ = LimpiarMensajeErrorAsync();
        }
        try
        {
            _reservas = listarReserva.Ejecutar();
        }
        catch (Exception err)
        {
            mensajeError = err.Message;
            _ = LimpiarMensajeErrorAsync();
        }
        CerrarModal();
    }
    void agregarReserva()
    {
        try
        {
            altaReserva.Ejecutar(reservaSeleccionada,sesion.UsuarioActual);
        }
        catch (Exception err)
        {
            mensajeError = err.Message;
            _ = LimpiarMensajeErrorAsync();
        }
        try
        {
            _reservas = listarReserva.Ejecutar();
        }
        catch (Exception err)
        {
            mensajeError = err.Message;
            _ = LimpiarMensajeErrorAsync();
        }
        CerrarModal();
    }
    void EliminarReserva()
    {
        try
        {
            bajaReserva.Ejecutar(reservaSeleccionada.Id, sesion.UsuarioActual);
        }
        catch (Exception err)
        {
            mensajeError = err.Message;
            _ = LimpiarMensajeErrorAsync();
        }
        try
        {
            _reservas = listarReserva.Ejecutar();
        }
        catch (Exception err)
        {
            mensajeError = err.Message;
            _ = LimpiarMensajeErrorAsync();
        }
        CerrarModal();
    }
    private string? mensajeError;

    private async Task LimpiarMensajeErrorAsync()
    {
        await Task.Delay(3000); // 3 segundos
        mensajeError = null;
        StateHasChanged();
    }
}